import telebot
from telebot import types

API_TOKEN = '7826173334:AAGxfnVCl_naBZKsfsSa9I1chZioTDJVe-Y'
bot = telebot.TeleBot(API_TOKEN)

# –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_progress = {}

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add('üìò –û—Å–Ω–æ–≤—ã Python', 'üåê –û—Å–Ω–æ–≤—ã —Å–µ—Ç–µ–π', 'üìä –ê–ª–≥–æ—Ä–∏—Ç–º—ã')

# –£—Ä–æ–∫–∏ –∏ —Ç–µ—Å—Ç—ã
lessons = {
    'üìò –û—Å–Ω–æ–≤—ã Python': [
        {
            'lesson': '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö.\n\n–ü—Ä–∏–º–µ—Ä:\nname = "Alice"\nage = 25\nprint(f"–ü—Ä–∏–≤–µ—Ç, {name}. –¢–µ–±–µ {age} –ª–µ—Ç.")',
            'question': '–ö–∞–∫–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö —É –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π name?',
            'options': ['str', 'int', 'list'],
            'answer': 'str',
            'theory': '''–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Python ‚Äî —ç—Ç–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã –≤ –ø–∞–º—è—Ç–∏. –û–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.

–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ Python:
1. `int` ‚Äî —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ (1, 2, -5).
2. `float` ‚Äî —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π (3.14, -0.001).
3. `str` ‚Äî —Å—Ç—Ä–æ–∫–∏, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤ ("Hello", "123").
4. `list` ‚Äî —Å–ø–∏—Å–∫–∏, —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö ([1, 2, 3], ["apple", "banana"]).
5. `dict` ‚Äî —Å–ª–æ–≤–∞—Ä–∏, —Ö—Ä–∞–Ω—è—Ç –ø–∞—Ä—ã –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ ({"key": "value"}).

–í –ø—Ä–∏–º–µ—Ä–µ:
```python
name = "Alice"
age = 25
print(f"–ü—Ä–∏–≤–µ—Ç, {name}. –¢–µ–±–µ {age} –ª–µ—Ç.")
```
–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è `name` –∏–º–µ–µ—Ç —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö `str`, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Ö—Ä–∞–Ω–∏—Ç —Å—Ç—Ä–æ–∫—É "Alice".
'''        },
        {
            'lesson': '–£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã.\n\n–ü—Ä–∏–º–µ—Ä:\nif age > 18:\n    print("–í–∑—Ä–æ—Å–ª—ã–π")\nelse:\n    print("–†–µ–±–µ–Ω–æ–∫")',
            'question': '–ö–∞–∫–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è?',
            'options': ['elif', 'else', 'switch'],
            'answer': 'else',
            'theory': '''–£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–∑–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏—è.

–û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã:
1. `if` ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç –±–ª–æ–∫ –∫–æ–¥–∞, –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ.
2. `else` ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –≤ `if` –ª–æ–∂–Ω–æ.
3. `elif` ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ª–æ–∂–Ω–æ.

–ü—Ä–∏–º–µ—Ä:
```python
age = 20
if age > 18:
    print("–í–∑—Ä–æ—Å–ª—ã–π")
else:
    print("–†–µ–±–µ–Ω–æ–∫")
```
–ó–¥–µ—Å—å, –µ—Å–ª–∏ `age` –±–æ–ª—å—à–µ 18, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞–ø–µ—á–∞—Ç–∞–µ—Ç "–í–∑—Ä–æ—Å–ª—ã–π". –ï—Å–ª–∏ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ ‚Äî "–†–µ–±–µ–Ω–æ–∫".
'''        }
    ],
    'üåê –û—Å–Ω–æ–≤—ã —Å–µ—Ç–µ–π': [
        {
            'lesson': 'IP-–∞–¥—Ä–µ—Å–∞ –∏ –ø–æ—Ä—Ç—ã.\n\nIP-–∞–¥—Ä–µ—Å ‚Äî —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Å–µ—Ç–∏.',
            'question': '–ö–∞–∫–æ–π IP-–∞–¥—Ä–µ—Å —è–≤–ª—è–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–º?',
            'options': ['8.8.8.8', '172.16.0.1', '192.168.0.1'],
            'answer': '192.168.0.1',
            'theory': '''IP-–∞–¥—Ä–µ—Å (Internet Protocol Address) ‚Äî —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Å–µ—Ç–∏.

–¢–∏–ø—ã IP-–∞–¥—Ä–µ—Å–æ–≤:
1. –õ–æ–∫–∞–ª—å–Ω—ã–µ (—á–∞—Å—Ç–Ω—ã–µ):
   - 192.168.x.x
   - 10.x.x.x
   - 172.16.x.x ‚Äî 172.31.x.x

2. –ü—É–±–ª–∏—á–Ω—ã–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.

–ü–æ—Ä—Ç ‚Äî —ç—Ç–æ —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ —Å–ª—É–∂–±—ã –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ. –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Ä—Ç 80 ‚Äî –¥–ª—è HTTP.
'''        }
    ],
    'üìä –ê–ª–≥–æ—Ä–∏—Ç–º—ã': [
        {
            'lesson': '–ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ ‚Äî —ç—Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ –∑–∞ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è.',
            'question': '–ö–∞–∫–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞?',
            'options': ['O(log n)', 'O(n)', 'O(n^2)'],
            'answer': 'O(log n)',
            'theory': '''–ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ ‚Äî —ç—Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ **–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º** –º–∞—Å—Å–∏–≤–µ.

–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –î–µ–ª–∏–º –º–∞—Å—Å–∏–≤ –ø–æ–ø–æ–ª–∞–º.
2. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏—Å–∫–æ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ —Å—Ä–µ–¥–Ω–µ–π —Ç–æ—á–∫–æ–π.
3. –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ ‚Äî –∏—â–µ–º –≤ –ª–µ–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ, –±–æ–ª—å—à–µ ‚Äî –≤ –ø—Ä–∞–≤–æ–π.
4. –ü–æ–≤—Ç–æ—Ä—è–µ–º –¥–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–ª–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞.

–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî `O(log n)`, —Ç–∞–∫ –∫–∞–∫ —Å –∫–∞–∂–¥—ã–º —à–∞–≥–æ–º –æ–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –≤ –¥–≤–∞ —Ä–∞–∑–∞.
'''        }
    ]
}

@bot.message_handler(commands=['start'])
def start_message(message):
    user_progress[message.chat.id] = {section: 0 for section in lessons}
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø IT Shiver Bot. –ß–µ–º —Ö–æ—á–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è?', reply_markup=main_menu)

@bot.message_handler(func=lambda message: message.text in lessons)
def send_lesson(message, section=None):
    if message.chat.id not in user_progress:
        user_progress[message.chat.id] = {section: 0 for section in lessons}
    section = section or message.text
    index = user_progress[message.chat.id][section]
    if index < len(lessons[section]):
        lesson_data = lessons[section][index]
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–æ—Ä–∏—é"
        markup = types.InlineKeyboardMarkup()
        theory_button = types.InlineKeyboardButton(text="üìñ –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–æ—Ä–∏—é", callback_data=f"theory_{section}_{index}")
        markup.add(theory_button)
        bot.send_message(message.chat.id, f'–£—Ä–æ–∫:\n\n{lesson_data["lesson"]}', reply_markup=markup)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        bot.send_message(message.chat.id, '–¢—ã –ø—Ä–æ—à–µ–ª –≤—Å–µ —É—Ä–æ–∫–∏ –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ!', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('theory_'))
def show_theory(call):
    try:
        _, section, index = call.data.split('_')
        section = str(section)
        index = int(index)

        lesson_data = lessons[section][index]
        bot.send_message(call.message.chat.id, f'–¢–µ–æ—Ä–∏—è:\n\n{lesson_data["theory"]}')

        # –ü–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Ç–µ–æ—Ä–∏–∏ - –ø–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(*lesson_data['options'])
        bot.send_message(call.message.chat.id, f'–í–æ–ø—Ä–æ—Å:\n{lesson_data["question"]}', reply_markup=markup)

    except (ValueError, IndexError, KeyError):
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–æ—Ä–∏–∏.") # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫.

@bot.message_handler(func=lambda message: message.text in sum([x['options'] for x in sum(lessons.values(), [])], []))
def check_answer(message):
    if message.chat.id not in user_progress:
        user_progress[message.chat.id] = {section: 0 for section in lessons}

    # –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–¥–µ–ª –∏ –∏–Ω–¥–µ–∫—Å —É—Ä–æ–∫–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç
    current_section = None
    current_index = None
    for section in lessons:
        for i, lesson_data in enumerate(lessons[section]):
            if message.text in lesson_data['options']:
                current_section = section
                current_index = i
                break
        if current_section:
            break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ —Ä–∞–∑–¥–µ–ª –Ω–∞–π–¥–µ–Ω

    if current_section is not None and current_index is not None:
        correct_answer = lessons[current_section][current_index]['answer']
        if message.text.strip().lower() == correct_answer.strip().lower():
            bot.send_message(message.chat.id, '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É.')
            user_progress[message.chat.id][current_section] += 1
            send_lesson(message, current_section)
        else:
            bot.send_message(message.chat.id, '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
    else:
        bot.send_message(message.chat.id, "–ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª –∏–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–∏ –µ–≥–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.")

@bot.message_handler(func=lambda message: message.text == 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
def back_to_main_menu(message):
    bot.send_message(message.chat.id, '–ß–µ–º —Ö–æ—á–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è?', reply_markup=main_menu)

print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')
bot.polling(none_stop=True)
